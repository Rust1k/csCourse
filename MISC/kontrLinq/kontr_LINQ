I.
Решите задание по обработке числовых и строковых последовательностей, используя Query и Method синтаксис языка запросов LINQ. В решении должны быть оба варианта

1. Даны две последовательности положительных целых чисел A и B. Сформировать последовательность строк вида «a:b», где a – число из A, а b – либо число из B такое, что сумма цифр в a совпадает с суммой цифр на нечетных позициях из b, либо 0 (если в B не содержится соответствующих чисел). Расположить элементы получившейся последовательности по возрастанию чисел a, а при одинаковых числах a – по убыванию b.
2. Даны две последовательности положительных целых чисел A и B. Сформировать последовательность строк вида «a:b», где a – число из A, а b – либо число из B такое, что цифры на позициях, кратных 5 у этих цифр совпадают, либо -1 (если в B не содержится соответствующих чисел). Расположить элементы получившейся последовательности по убыванию чисел a, а при одинаковых числах a – по возрастанию b.
3. Даны две последовательности положительных целых чисел A и B. Сформировать последовательность строк вида «a:b», где a – число из A, а b – либо число из B, такое, что первые две цифры в a совпадают с последними в b (в люблм порядке), либо 0 (если в B не содержится соответствующих чисел). Расположить элементы получившейся последовательности по возрастанию чисел a, а при одинаковых числах a – по убыванию b.
4. Даны строковые последовательности A и B, все строки в каждой из них имеют ненулевую длину. Сформировать последовательностей строк вида «a.b», где а – строка из А, b – либо строка из B с совпадающим количеством букв "q", что и в строке a, либо строка из одного символа “!”. Расположить элементы получившейся последовательности в лексикографическом порядке по убыванию.
5. Даны строковые последовательности A и B, все строки в каждой из них состоят только из цифр и заглавных букв латинского алфавита и имеют ненулевую длину. Сформировать последовательностей строк вида «a.b», где а – строка из А, b – либо строка из B с таким же количеством букв или таким же количеством цифр, но меньшим числом букв, что и в строке a, либо строка из одного символа “!”. Расположить элементы получившейся последовательности в лексикографическом порядке по убыванию.

II.
Методы расширения
1. Реализовать метод расширения осуществляющий декартово произведение двух последовательностей (четных элементов из первой последовательности и нечетных из второй). Метод должен быть обобщенным. Типы элементов соединяемых последовательностей могут отличаться. Должна быть предусмотрена возможность указания способа формирования элементов итоговой последовательности с помощью делегата (selector)
2. Реализуйте метод расширения для последовательностей IEnuberable<T>, осуществляющий Self Outer Join (внешнее соединение последовательности с самой собой) по указанным с помощью делегатов способам получения ключа и формирования результирующей последовательности.
3. Реализуйте метод расширения DistinctBy для последовательностей IEnumerable<T>, формирующий по исходной последовательности её подпоследовательность, состоящую из элементов с уникальными значениями функции на её элементах (Func<TItem,TKey>), кроме того с подсчетом количества наблюдений в исходной последовательности
4. Реализуйте метод расширения Partition для последовательностей IEnumerable<T>, формирующий последовательность пар (Tuple), элементы которых удовлетворяют и не удовлетворяют некоторому предикату (Func<TItem,bool>) соответственно (перебрать все возможные пары).
5. Реализуйте модифицированный метод расширения Zip3 для последовательностей, формирующий по последовательности и двум другим последовательностям последовательность элементов, сформированных из троек элементов схоже с методом Zip, разница в том, что если в первой последовательности элементов больше, чем во второй и третьей, то эти элементы тоже должны попасть в результат, при этом элементы для второго и третьего элемента должны браться с помощью метода default. Zip – формирует последовательность – застёжку по парам, в этом задании нужно формировать по тройкам. Типы элементов последовательностей могут отличаться.

III.
LinqObj. Написать запросы и записать результаты в текстовый файл (одна запись на строке).
В качестве ответа приложить файл исходного кода и текстовый файл с результатами запроса. Реализовать любым из вариантов: Query или Method синтаксисом

Преамбула:
В каждом задании данной подгруппы требуется обработать несколько (от двух до четырех) последовательностей из следующего набора:
A: сведения о потребителях, содержащие поля «Код потребителя», «Год рождения», «Улица проживания»;
B: сведения о товарах, содержащие поля «Артикул товара», «Категория», «Страна-производитель»;
C: скидки для потребителей в различных магазинах, содержащие поля «Код потребителя», «Название магазина», «Скидка (в процентах)»;
D: цены товаров в различных магазинах, содержащие поля «Артикул товара», «Название магазина», «Цена (в рублях)»;
E: сведения о покупках потребителей в различных магазинах, содержащие поля «Код потребителя», «Артикул товара», «Название магазина».

Порядок следования полей для элементов каждой последовательности определяется в формулировке задания.
В последовательности A все элементы имеют различные значения поля «Код потребителя». В последовательности B все элементы имеют различные значения поля «Артикул товара». В последовательности C все элементы имеют различные комбинации полей «Код потребителя» и «Название магазина». В последовательности D все элементы имеют различные комбинации полей «Артикул товара» и «Название магазина». Последовательность E может содержать одинаковые элементы (это соответствует ситуации, при которой один и тот же потребитель приобрел в одном и том же магазине несколько одинаковых товаров).
Все значения кодов потребителей и артикулов товаров, присутствующие в последовательностях C, D и E, обязательно содержатся в последовательностях A и B. Некоторые значения кодов потребителей и артикулов товаров, присутствующие в последовательностях A и B, могут отсутствовать в остальных последовательностях. Любая комбинация «магазин–товар», присутствующая в последовательности E, обязательно присутствует и в последовательности D. Комбинация «потребитель–магазин», присутствующая в последовательности E, может отсутствовать в последовательности C; это означает, что при покупке указанного товара в данном магазине потребитель не имел скидки (т. е. скидка была равна 0).
Коды потребителей, годы рождения, скидки и цены задаются целыми числами; значения скидок лежат в диапазоне от 5 до 50. Прочие поля являются строковыми и не содержат пробелов. Артикулы товаров имеют формат «AAddd-dddd», где на позициях, помеченных символом «A», располагается какая-либо заглавная латинская буква, а на позициях, помеченных символом «d», — какая-либо цифра.
Если потребитель приобрел товар, имеющий цену p, со скидкой d процентов, то размер скидки на данный товар должен вычисляться по формуле p · d / 100, где символ «/» обозначает операцию целочисленного деления (иными словами, при вычислении размера скидки копейки отбрасываются).

1. Даны последовательности B, D и E, включающие следующие поля:
B: <Артикул товара> <Страна-производитель> <Категория>
D: <Название магазина> <Артикул товара> <Цена (в рублях)>
E: <Название магазина> <Код потребителя> <Артикул товара>
Свойства последовательностей описаны в преамбуле. Для каждой страны-производителя определить количество приобретенных товаров из данной страны и суммарную стоимость приобретенных товаров (вначале выводится название страны, затем количество товаров, затем суммарная стоимость). Если сведения о проданных товарах для некоторой страны-производителя отсутствуют, то информация об этой стране не выводится. Сведения о каждой стране выводить на новой строке и упорядочивать по названиям стран в алфавитном порядке.

2. Даны последовательности B, D и E, включающие следующие поля:
B: <Категория> <Страна-производитель> <Артикул товара>
D: <Цена (в рублях)> <Артикул товара> <Название магазина>
E: <Артикул товара> <Код потребителя> <Название магазина>
Свойства последовательностей описаны в преамбуле. Для каждого потребителя определить количество категорий приобретенных им товаров и максимальную цену одной его покупки (вначале выводится количество категорий товаров, затем код потребителя, затем максимальная цена покупки). Сведения о каждом потребителе выводить на новой строке и упорядочивать по убыванию количества категорий, а при совпадении количества категорий — по возрастанию кодов потребителей.

3. Даны последовательности B, D и E, включающие следующие поля:
B: <Страна-производитель> <Артикул товара> <Категория>
D: <Цена (в рублях)> <Название магазина> <Артикул товара>
E: <Название магазина> <Артикул товара> <Код потребителя>
Свойства последовательностей описаны в преамбуле. Для каждого магазина, указанного в E, и каждой страны-производителя определить суммарную
стоимость товаров из данной страны, проданных в данном магазине (вначале выводится название магазина, затем название страны, затем суммарная стоимость). Если для некоторой пары «магазин–страна» отсутствует информация о проданных товарах, то в качестве суммарной стоимости выводится 0. Сведения о каждой паре «магазин–страна» выводить на новой строке и упорядочивать по названиям магазинов в алфавитном порядке, а для одинаковых названий магазинов — по названиям стран (также в алфавитном порядке).

4. Даны последовательности C, D и E, включающие следующие поля:
C: <Скидка (в процентах)> <Название магазина> <Код потребителя>
D: <Артикул товара> <Название магазина> <Цена (в рублях)>
E: <Артикул товара> <Название магазина> <Код потребителя>
Свойства последовательностей описаны в преамбуле. Для каждого магазина и каждого товара определить количество покупок этого товара со скидкой в данном магазине и суммарную стоимость этих покупок с учетом скидки (вначале выводится название магазина, затем артикул товара, затем количество покупок со скидкой и их суммарная стоимость). При вычислении размера скидки на товар копейки отбрасываются. Если для некоторой пары «магазин–товар» не найдено ни одной покупки со скидкой, то информация о данной паре не выводится. Если не найдено ни одной подходящей пары «магазин–товар», то записать в результирующий файл текст «Требуемые данные не найдены». Сведения о каждой паре «магазин–товар» выводить на новой строке и упорядочивать по названиям магазинов в алфавитном порядке, а для одинаковых названий — по артикулам товаров (также в алфавитном порядке).

5. Даны последовательности C, D и E, включающие следующие поля:
C: <Скидка (в процентах)> <Код потребителя> <Название магазина>
D: <Название магазина> <Цена (в рублях)> <Артикул товара>
E: <Код потребителя> <Название магазина> <Артикул товара>
Свойства последовательностей описаны в преамбуле. Для каждой пары «товар–магазин», указанной в E, определить максимальный размер скидки на этот товар при его приобретении в данном магазине (вначале выводится артикул товара, затем название магазина, затем максимальный размер скидки). При вычислении размера скидки на товар копейки отбрасываются. Если все продажи товара в некотором магазине проводились без скидки, то в качестве максимального размера скидки для данной пары выводится 0. Сведения о каждой паре «товар–магазин» выводить на новой строке и упорядочивать по артикулам товаров в алфавитном порядке, а для одинаковых артикулов — по названиям магазинов (также в алфавитном порядке).
